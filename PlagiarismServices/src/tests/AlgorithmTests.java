package tests;

import static 
org.junit.Assert.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.Test;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import com.plagiarism.response.Highlighter;
import com.plagiarism.response.Response;
import com.plagiarism.service.AlgorithmBase;

/**
 * @author : Guiheng Zhou
 * @date : 12/3/2017
 * The following test cases test the service end of detector system. Input: two files. Output: Similarity scores.
 */
public class AlgorithmTests {
	
	// an AlgorithmBase object
	private AlgorithmBase alg;
	
	private String basePath = "testResources/";
	
	// Constructor of AlgorithmTests
	public AlgorithmTests() {
		alg = new AlgorithmBase();
	}
	
	//================================================================================================
	// H E L P E R   F U N C T I O N S
	//================================================================================================
	
	// convertToMultipartFile : String -> MultipartFile
	// Take a String variable indicating a path of a file in the project as the input,
	// output the file in the MultipartFile format.
	public MultipartFile convertToMultipartFile(String path) throws IOException {
		File file = new File(path);
	    FileInputStream input = new FileInputStream(file);
	    MultipartFile multipartFile = new MockMultipartFile("file", file.getName(), "text/plain", IOUtils.toByteArray(input));
	    return multipartFile;
	}

	// fetchSimilarity : MultipartFile MultipartFile -> float
	// Take two MultipartFiles as the input,
	// output the similarity score after running the plagiarism detector algorithm.
	public float fetchSimilarity(MultipartFile f1, MultipartFile f2) {
		Response<Highlighter> result = alg.run(f1, f2);
		List<Highlighter> resultList = result.getResultList();
		Highlighter firstResult = resultList.get(0);
		return firstResult.getSimilarity();
	}
	
	// deleteTemporaryFiles : String String -> Void
	// Take two String variables indicating two paths of files as the input,
	// delete the temporary files generated by mockMultipartFile.
	public void deleteTemporaryFiles(String path1, String path2) {
		String[] path1Parts = path1.split("/");
		String[] path2Parts = path2.split("/");
		File file1 = new File(path1Parts[path1Parts.length - 1]);
		File file2 = new File(path2Parts[path1Parts.length - 1]);
		file1.delete();
		file2.delete();
	}
	
	//================================================================================================
	// T E S T S
	// Note: The test files are provided by instructors of CS 5500, which are available at:
	// https://github.ccs.neu.edu/cs5500/resources/tree/master/PlagiarismChecker-Data
	//================================================================================================
	@Test
	public void testSet01() throws IOException {
		String path1 = basePath + "set01/Sample1/LinkedList.java";
		String path2 = basePath + "set01/Sample2/SimpleLinkedList.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(1, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet08() throws IOException {
		String path1 = basePath + "set08/Sample1/SolutionA.java";
		String path2 = basePath + "set08/Sample2/SolutionB.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(0.3646, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet09() throws IOException {
		String path1 = basePath + "set09/Sample1/Tokenize.java";
		String path2 = basePath + "set09/Sample2/Words.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(0.4797, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet12() throws IOException {
		String path1 = basePath + "set12/Sample1/Solution";
		String path2 = basePath + "set12/Sample2/Solution2";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(0.8380, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet15() throws IOException {
		String path1 = basePath + "set15/Sample1/Solution";
		String path2 = basePath + "set15/Sample2/Solution";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(1, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet17() throws IOException {
		String path1 = basePath + "set17/Sample1/ValidateTree.java";
		String path2 = basePath + "set17/Sample2/ValidateTree.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(0.9942, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet18() throws IOException {
		String path1 = basePath + "set18/Sample1/SearchArray.java";
		String path2 = basePath + "set18/Sample2/SearchArray.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(1, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet19() throws IOException {
		String path1 = basePath + "set19/Sample1/Solution.java";
		String path2 = basePath + "set19/Sample2/Solution.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(1, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}
	
	@Test
	public void testSet20() throws IOException {
		String path1 = basePath + "set20/Sample1/Solution.java";
		String path2 = basePath + "set20/Sample2/Solution.java";

		MultipartFile f1 = convertToMultipartFile(path1);
		MultipartFile f2 = convertToMultipartFile(path2);
		
		assertEquals(1, fetchSimilarity(f1, f2), 0.0001);
		deleteTemporaryFiles(path1, path2);
	}

}
